#! /usr/bin/env nix-shell
(* -*- mode: tuareg -*-
#! nix-shell -i ocaml -p ocaml ffmpeg
*)

#use "util.ml"

#use "ffmpeg.ml"

#load "unix.cma"

module Unix = UnixLabels

let usage_msg = "feedback [options] - create a webcam device with a color overlay."

let color_option = ref (Ffmpeg.NamedColor `Green)

let input_device = ref "/dev/video1"

let loopback_device = ref "/dev/video0"

let anon_param param = Arg.Bad (Printf.sprintf "Unknown param: %s" param) |> raise

let set_color color =
  color_option := match String.uppercase_ascii color with
    | "RED"    -> Ffmpeg.NamedColor `Red
    | "YELLOW" -> Ffmpeg.NamedColor `Yellow
    | "GREEN"  -> Ffmpeg.NamedColor `Green
    | _        -> Arg.Bad (Printf.sprintf "Unknown color: %s" color)
                  |> raise

let spec =
  [("-c", Arg.String set_color, "red|yellow|green\tThe color to display.  Case insensitive.");
   ("-o", Arg.Set_string loopback_device, "device_node\tThe v4l2 loopback device.");
   ("-i", Arg.Set_string input_device, "device_node\tThe v4l2 webcam device.")]

let start_overlay color loopback_device input_device =
  let open Ffmpeg.Syntax in
  let pipeline =
    let* webcam_handle = Ffmpeg.Source.v4l2 input_device in
    let* color_handle = Ffmpeg.Source.color color in
    let* overlay = Ffmpeg.Filter.overlay webcam_handle color_handle in
    Ffmpeg.Sink.v4l2 overlay loopback_device
  in
  let args = Ffmpeg.to_string_array pipeline in
  Unix.execvp ~prog:"ffmpeg" ~args

let () =
  Arg.parse (Arg.align spec) anon_param usage_msg;
  start_overlay !color_option !loopback_device !input_device
