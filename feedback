#! /usr/bin/env nix-shell
(* -*- mode: tuareg -*-
#! nix-shell -i ocaml -p ocaml ffmpeg
 *)

#use "util.ml"

#use "ffmpeg.ml"

type color =
  | Red
  | Yellow
  | Green

let process_args () =
  Util.arg 1
  |> Option.to_result ~none:"Color parameter needed"
  |> Result.map String.uppercase_ascii
  |> Fun.flip Result.bind (fun c ->
         match c with
         | "RED"    -> Ok Red
         | "YELLOW" -> Ok Yellow
         | "GREEN"  -> Ok Green
         | unkown   -> Error (Printf.sprintf "Unkown color: %s" unkown))

let start_overlay color =
  let input_cam_path = "/dev/video0" in (* TODO: make this dynamic *)
  let builder = Ffmpeg.builder () in
  (* TODO: use [v4l] instead of [file] *)
  let (_handle, builder) = Ffmpeg.source builder (Ffmpeg.Source.file input_cam_path) in
  let command = Ffmpeg.to_string_array builder |> Array.to_list |> String.concat " " in
  print_endline command

let () =
  match process_args () with
  | Ok color    -> start_overlay color
  | Error error -> Printf.eprintf "ERROR: %s" error; exit 1
